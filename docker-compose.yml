services:
  #---------------------- Data Warehouse (Postgres) ----------------------
  postgres-dwh:
    image: postgres:15
    container_name: postgres-datawarehouse
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DWH_DB}
      POSTGRES_USER: ${POSTGRES_DWH_USER}
      POSTGRES_PASSWORD: ${POSTGRES_DWH_PASSWORD}
      TZ: Asia/Ho_Chi_Minh
    command: ["postgres", "-c","timezone=Asia/Ho_Chi_Minh", "-c","log_timezone=Asia/Ho_Chi_Minh"]
    ports:
      - "${POSTGRES_DWH_PORT}:5432"
    volumes:
      - postgres-dwh-data:/var/lib/postgresql/data
    networks: [data-net]
    
  #----------------------HDFS -----------------------------
  hdfs-namenode:
    image: apache/hadoop:3
    container_name: hdfs-namenode
    hostname: hdfs-namenode
    user: "0:0"
    restart: always
    environment:
      - TZ=Asia/Ho_Chi_Minh
      - HADOOP_ROOT_LOGGER=INFO,console
      - HADOOP_CONF_DIR=/opt/hadoop/etc/hadoop
    ports:
      - "9870:9870"      # namenode web UI
      - "9000:9000"      # namenode RPC (fs.defaultFS)
    volumes:
      - ./hadoop/conf:/opt/hadoop/etc/hadoop:ro
      - hdfs-name:/hadoop/dfs/name
      - ./hadoop/scripts:/opt/bootstrap:ro
      - ./hadoop/logs:/opt/hadoop/logs
    command: ["/bin/bash","-lc","bash /opt/bootstrap/namenode-init.sh"]
    networks: [data-net]

  hdfs-datanode-1:
    image: apache/hadoop:3
    container_name: hdfs-datanode-1
    hostname: hdfs-datanode-1
    user: "0:0"
    depends_on: [hdfs-namenode]
    restart: always
    environment:
      - TZ=Asia/Ho_Chi_Minh
      - HADOOP_ROOT_LOGGER=INFO,console
      - HADOOP_CONF_DIR=/opt/hadoop/etc/hadoop
    ports:
      - "9864:9864"      # datanode web UI
    volumes:
      - ./hadoop/conf:/opt/hadoop/etc/hadoop:ro
      - hdfs-data-1:/hadoop/dfs/data
      - ./hadoop/scripts:/opt/bootstrap:ro
      - ./hadoop/logs:/opt/hadoop/logs
    command: ["/bin/bash","-lc","bash /opt/bootstrap/datanode-1-init.sh"]
    networks: [data-net]   

  #---------------------- Spark Standalone ----------------------
  spark-master:
    image: bitnami/spark:3.5.1
    container_name: spark-master
    restart: always
    ports:
      - "${SPARK_MASTER_UI_PORT}:8080"
      - "7077:7077"
    volumes:
      - ./spark-data/app:/opt/bitnami/spark/app
      - ./spark-data/jars:/opt/bitnami/spark/external-jars
      - ./spark-data/eventlogs:/opt/bitnami/spark/eventlogs
      - ./data:/data
      - ./hadoop/conf:/opt/hadoop-conf:ro
    environment:
      - SPARK_MODE=master
      - SPARK_MASTER_HOST=spark-master
      - HADOOP_CONF_DIR=/opt/hadoop-conf
    networks: [data-net]

  spark-worker:
    image: bitnami/spark:3.5.1
    container_name: spark-worker-1
    depends_on: [spark-master]
    restart: always
    ports:
      - "8081:8081"
    volumes:
      - ./spark-data/app:/opt/bitnami/spark/app
      - ./spark-data/jars:/opt/bitnami/spark/external-jars
      - ./spark-data/eventlogs:/opt/bitnami/spark/eventlogs
      - ./data:/data
      - ./hadoop/conf:/opt/hadoop-conf:ro
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_CORES=${SPARK_WORKER_CORES}
      - SPARK_WORKER_MEMORY=${SPARK_WORKER_MEMORY}
      - HADOOP_CONF_DIR=/opt/hadoop-conf
    networks: [data-net]

  spark-history-server:
    image: bitnami/spark:3.5.1
    container_name: spark-history-server
    depends_on: [spark-master]
    restart: always
    ports:
      - "18080:18080"
    volumes:
      - ./spark-data/eventlogs:/opt/bitnami/spark/eventlogs
    command: /opt/bitnami/spark/sbin/start-history-server.sh
    environment:
      - SPARK_HISTORY_OPTS=-Dspark.history.fs.logDirectory=/opt/bitnami/spark/eventlogs
    networks: [data-net]

  #---------------------- Airflow Backend ----------------------
  postgres-airflow-db:
    image: postgres:15
    container_name: postgres-airflow-db
    restart: always
    environment:
      POSTGRES_DB: ${AIRFLOW_DB}
      POSTGRES_USER: ${AIRFLOW_USER_USERNAME}
      POSTGRES_PASSWORD: ${AIRFLOW_USER_PASSWORD}
      TZ: Asia/Ho_Chi_Minh
    volumes:
      - postgres-airflow-data:/var/lib/postgresql/data
    command: ["postgres", "-c","timezone=Asia/Ho_Chi_Minh", "-c","log_timezone=Asia/Ho_Chi_Minh"]
    networks: [data-net]
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${AIRFLOW_USER_USERNAME:-airflow}"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7.2
    container_name: redis-broker
    restart: always
    networks: [data-net]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  #---------------------- Airflow Image (c√≥ Spark CLI) ----------------------
  airflow-init:
    build: ./airflow
    image: airflow-spark:2.9.2
    container_name: airflow-init
    depends_on:
      postgres-airflow-db: { condition: service_healthy }
      redis: { condition: service_healthy }
    environment:
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${AIRFLOW_USER_USERNAME}:${AIRFLOW_USER_PASSWORD}@postgres-airflow-db:5432/${AIRFLOW_DB}
      AIRFLOW__CELERY__BROKER_URL: redis://redis:6379/0
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://${AIRFLOW_USER_USERNAME}:${AIRFLOW_USER_PASSWORD}@postgres-airflow-db:5432/${AIRFLOW_DB}
      AIRFLOW__CORE__TEST_CONNECTION: Enabled
      AIRFLOW_ADMIN_USER: ${AIRFLOW_ADMIN_USERNAME}
      AIRFLOW_ADMIN_PASSWORD: ${AIRFLOW_ADMIN_PASSWORD}
      AIRFLOW_USER_USERNAME: ${AIRFLOW_USER_USERNAME}
      AIRFLOW_USER_PASSWORD: ${AIRFLOW_USER_PASSWORD}
      AIRFLOW__WEBSERVER__SECRET_KEY: ${AIRFLOW_WEBSERVER_SECRET_KEY}
      AIRFLOW__CORE__FERNET_KEY: ${AIRFLOW_CORE_FERNET_KEY}
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
      - ./airflow/scripts:/opt/airflow/scripts:ro
    command: ["bash", "-c", "/opt/airflow/scripts/init.sh"]
    networks: [data-net]

  airflow-webserver:
    image: airflow-spark:2.9.2
    container_name: airflow-webserver
    restart: always
    depends_on:
      airflow-init: { condition: service_completed_successfully }
    ports:
      - "${AIRFLOW_WEB_PORT}:8080"
    environment:
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${AIRFLOW_USER_USERNAME}:${AIRFLOW_USER_PASSWORD}@postgres-airflow-db:5432/${AIRFLOW_DB}
      AIRFLOW__CELERY__BROKER_URL: redis://redis:6379/0
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://${AIRFLOW_USER_USERNAME}:${AIRFLOW_USER_PASSWORD}@postgres-airflow-db:5432/${AIRFLOW_DB}
      AIRFLOW__CORE__TEST_CONNECTION: Enabled
      AIRFLOW__WEBSERVER__SECRET_KEY: ${AIRFLOW_WEBSERVER_SECRET_KEY}
      AIRFLOW__CORE__FERNET_KEY: ${AIRFLOW_CORE_FERNET_KEY}
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
    command: ["airflow", "webserver"]
    networks: [data-net]
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 10s
      timeout: 10s
      retries: 5

  airflow-scheduler:
    image: airflow-spark:2.9.2
    container_name: airflow-scheduler
    restart: always
    depends_on:
      airflow-webserver: { condition: service_healthy }
    environment:
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${AIRFLOW_USER_USERNAME}:${AIRFLOW_USER_PASSWORD}@postgres-airflow-db:5432/${AIRFLOW_DB}
      AIRFLOW__CELERY__BROKER_URL: redis://redis:6379/0
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://${AIRFLOW_USER_USERNAME}:${AIRFLOW_USER_PASSWORD}@postgres-airflow-db:5432/${AIRFLOW_DB}
      AIRFLOW__CORE__TEST_CONNECTION: Enabled
      AIRFLOW__WEBSERVER__SECRET_KEY: ${AIRFLOW_WEBSERVER_SECRET_KEY}
      AIRFLOW__CORE__FERNET_KEY: ${AIRFLOW_CORE_FERNET_KEY}
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
    command: ["airflow", "scheduler"]
    networks: [data-net]

  airflow-worker:
    image: airflow-spark:2.9.2
    container_name: airflow-worker
    restart: always
    depends_on:
      airflow-scheduler: { condition: service_started }
    environment:
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${AIRFLOW_USER_USERNAME}:${AIRFLOW_USER_PASSWORD}@postgres-airflow-db:5432/${AIRFLOW_DB}
      AIRFLOW__CELERY__BROKER_URL: redis://redis:6379/0
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://${AIRFLOW_USER_USERNAME}:${AIRFLOW_USER_PASSWORD}@postgres-airflow-db:5432/${AIRFLOW_DB}
      AIRFLOW__CORE__TEST_CONNECTION: Enabled
      AIRFLOW__WEBSERVER__SECRET_KEY: ${AIRFLOW_WEBSERVER_SECRET_KEY}
      AIRFLOW__CORE__FERNET_KEY: ${AIRFLOW_CORE_FERNET_KEY}
      HADOOP_CONF_DIR : /opt/hadoop-conf
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
      - ./spark-data/app:/opt/bitnami/spark/app
      - ./spark-data/jars:/opt/bitnami/spark/external-jars
      - ./spark-data/eventlogs:/opt/bitnami/spark/eventlogs
      - ./data:/data
      - ./spark-cache/ivy2:/home/airflow/.ivy2
      - ./hadoop/conf:/opt/hadoop-conf:ro
    command: ["airflow", "celery", "worker"]
    networks: [data-net]
    
    
    # --- Superset metadata Postgres ---
  postgres-superset-db:
    image: postgres:15
    container_name: postgres-superset-db
    restart: always
    environment:
      POSTGRES_DB: ${SUPERSET_DB}
      POSTGRES_USER: ${SUPERSET_USER_USERNAME}
      POSTGRES_PASSWORD: ${SUPERSET_USER_PASSWORD}
      TZ: Asia/Ho_Chi_Minh
    volumes:
      - postgres-superset-data:/var/lib/postgresql/data
    command: ["postgres", "-c","timezone=Asia/Ho_Chi_Minh", "-c","log_timezone=Asia/Ho_Chi_Minh"]
    networks: [data-net]
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${SUPERSET_USER_USERNAME}"]
      interval: 5s
      timeout: 5s
      retries: 10

# --- One-shot init Superset (migrate DB + t·∫°o admin) ---
  superset-init:
    image: apache/superset:3.1.0
    container_name: superset-init
    depends_on:
      postgres-superset-db: { condition: service_healthy }
    environment:
      SUPERSET_CONFIG_PATH: /app/pythonpath/superset_config.py
      SUPERSET_SECRET_KEY: ${SUPERSET_SECRET_KEY}
      SUPERSET_DB: ${SUPERSET_DB}
      SUPERSET_USER_USERNAME: ${SUPERSET_USER_USERNAME}
      SUPERSET_USER_PASSWORD: ${SUPERSET_USER_PASSWORD}
      SUPERSET_DB_HOST: postgres-superset-db
      ADMIN_USERNAME: ${SUPERSET_ADMIN_USERNAME}
      ADMIN_EMAIL: ${SUPERSET_ADMIN_EMAIL}
      ADMIN_PASSWORD: ${SUPERSET_ADMIN_PASSWORD}
    volumes:
      - ./superset/app/pythonpath:/app/pythonpath:ro
      - ./superset/app/scripts:/app/scripts:ro
      - superset-home:/app/superset_home
    command: ["/bin/bash","-lc","/app/scripts/init.sh"]
    #command: ["python","/app/scripts/init.py"]
    networks: [data-net]
    restart: "no"

# --- Superset web ---
  superset:
    image: apache/superset:3.1.0
    container_name: superset
    depends_on:
      superset-init:
        condition: service_completed_successfully
    ports:
      - "${SUPERSET_PORT}:8088"
    environment:
      SUPERSET_CONFIG_PATH: /app/pythonpath/superset_config.py
      SUPERSET_SECRET_KEY: ${SUPERSET_SECRET_KEY}
      SUPERSET_DB: ${SUPERSET_DB}
      SUPERSET_USER_USERNAME: ${SUPERSET_USER_USERNAME}
      SUPERSET_USER_PASSWORD: ${SUPERSET_USER_PASSWORD}
      SUPERSET_DB_HOST: postgres-superset-db
    volumes:
      - ./superset/app/pythonpath:/app/pythonpath:ro
      - ./superset/app/scripts:/app/scripts:ro
      - superset-home:/app/superset_home
    networks: [data-net]
    restart: always


networks:
  data-net:
    driver: bridge

volumes:
  postgres-dwh-data:
  postgres-airflow-data:
  postgres-superset-data:
  superset-home:
  hdfs-name:
  hdfs-data-1: