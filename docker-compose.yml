services:
  #---------------------- Data Warehouse (Postgres) ----------------------
  postgres-dwh:
    image: postgres:15
    container_name: postgres-datawarehouse
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DWH_DB}
      POSTGRES_USER: ${POSTGRES_DWH_USER}
      POSTGRES_PASSWORD: ${POSTGRES_DWH_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres-dwh-data:/var/lib/postgresql/data
    networks: [data-net]

  #---------------------- Spark Standalone ----------------------
  spark-master:
    image: bitnami/spark:3.5.1
    container_name: spark-master
    restart: always
    ports:
      - "8080:8080"
      - "7077:7077"
    volumes:
      - ./spark-data/app:/opt/bitnami/spark/app
      - ./spark-data/jars:/opt/bitnami/spark/external-jars
      - ./spark-data/eventlogs:/opt/bitnami/spark/eventlogs
      - ./data:/data
    environment:
      - SPARK_MODE=master
      - SPARK_MASTER_HOST=spark-master
    networks: [data-net]

  spark-worker:
    image: bitnami/spark:3.5.1
    container_name: spark-worker-1
    depends_on: [spark-master]
    restart: always
    ports:
      - "8081:8081"
    volumes:
      - ./spark-data/app:/opt/bitnami/spark/app
      - ./spark-data/jars:/opt/bitnami/spark/external-jars
      - ./spark-data/eventlogs:/opt/bitnami/spark/eventlogs
      - ./data:/data
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_CORES=${SPARK_WORKER_CORES}
      - SPARK_WORKER_MEMORY=${SPARK_WORKER_MEMORY}
    networks: [data-net]

  spark-history-server:
    image: bitnami/spark:3.5.1
    container_name: spark-history-server
    depends_on: [spark-master]
    restart: always
    ports:
      - "18080:18080"
    volumes:
      - ./spark-data/eventlogs:/opt/bitnami/spark/eventlogs
    command: /opt/bitnami/spark/sbin/start-history-server.sh
    environment:
      - SPARK_HISTORY_OPTS=-Dspark.history.fs.logDirectory=/opt/bitnami/spark/eventlogs
    networks: [data-net]

  #---------------------- Airflow Backend ----------------------
  postgres-airflow-db:
    image: postgres:15
    container_name: postgres-airflow-db
    restart: always
    environment:
      POSTGRES_DB: ${AIRFLOW_DB}
      POSTGRES_USER: ${AIRFLOW_USER_USERNAME}
      POSTGRES_PASSWORD: ${AIRFLOW_USER_PASSWORD}
    volumes:
      - postgres-airflow-data:/var/lib/postgresql/data
    networks: [data-net]
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${AIRFLOW_USER_USERNAME:-airflow}"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7.2
    container_name: redis-broker
    restart: always
    networks: [data-net]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  #---------------------- Airflow Image (có Spark CLI) ----------------------
  airflow-init:
    build: ./airflow
    image: airflow-spark:2.9.2
    container_name: airflow-init
    depends_on:
      postgres-airflow-db: { condition: service_healthy }
      redis: { condition: service_healthy }
    environment:
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${AIRFLOW_USER_USERNAME}:${AIRFLOW_USER_PASSWORD}@postgres-airflow-db:5432/${AIRFLOW_DB}
      AIRFLOW__CELERY__BROKER_URL: redis://redis:6379/0
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://${AIRFLOW_USER_USERNAME}:${AIRFLOW_USER_PASSWORD}@postgres-airflow-db:5432/${AIRFLOW_DB}
      AIRFLOW__CORE__TEST_CONNECTION: Enabled
      AIRFLOW_ADMIN_USER: ${AIRFLOW_ADMIN_USER}
      AIRFLOW_ADMIN_PASSWORD: ${AIRFLOW_ADMIN_PASSWORD}
      AIRFLOW_USER_USERNAME: ${AIRFLOW_USER_USERNAME}
      AIRFLOW_USER_PASSWORD: ${AIRFLOW_USER_PASSWORD}
      AIRFLOW__WEBSERVER__SECRET_KEY: ${AIRFLOW_WEBSERVER_SECRET_KEY}
      AIRFLOW__CORE__FERNET_KEY: ${AIRFLOW_CORE_FERNET_KEY}

    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
    command: ["bash", "-c", "/opt/airflow/scripts/init.sh"]
    networks: [data-net]

  airflow-webserver:
    image: airflow-spark:2.9.2
    container_name: airflow-webserver
    restart: always
    depends_on:
      airflow-init: { condition: service_completed_successfully }
    ports:
      - "8088:8080"
    environment:
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${AIRFLOW_USER_USERNAME}:${AIRFLOW_USER_PASSWORD}@postgres-airflow-db:5432/${AIRFLOW_DB}
      AIRFLOW__CELERY__BROKER_URL: redis://redis:6379/0
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://${AIRFLOW_USER_USERNAME}:${AIRFLOW_USER_PASSWORD}@postgres-airflow-db:5432/${AIRFLOW_DB}
      AIRFLOW__CORE__TEST_CONNECTION: Enabled
      AIRFLOW__WEBSERVER__SECRET_KEY: ${AIRFLOW_WEBSERVER_SECRET_KEY}
      AIRFLOW__CORE__FERNET_KEY: ${AIRFLOW_CORE_FERNET_KEY}
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
    command: ["airflow", "webserver"]
    networks: [data-net]
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 10s
      timeout: 10s
      retries: 5

  airflow-scheduler:
    image: airflow-spark:2.9.2
    container_name: airflow-scheduler
    restart: always
    depends_on:
      airflow-webserver: { condition: service_healthy }
    environment:
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${AIRFLOW_USER_USERNAME}:${AIRFLOW_USER_PASSWORD}@postgres-airflow-db:5432/${AIRFLOW_DB}
      AIRFLOW__CELERY__BROKER_URL: redis://redis:6379/0
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://${AIRFLOW_USER_USERNAME}:${AIRFLOW_USER_PASSWORD}@postgres-airflow-db:5432/${AIRFLOW_DB}
      AIRFLOW__CORE__TEST_CONNECTION: Enabled
      AIRFLOW__WEBSERVER__SECRET_KEY: ${AIRFLOW_WEBSERVER_SECRET_KEY}
      AIRFLOW__CORE__FERNET_KEY: ${AIRFLOW_CORE_FERNET_KEY}
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
    command: ["airflow", "scheduler"]
    networks: [data-net]

  airflow-worker:
    image: airflow-spark:2.9.2
    container_name: airflow-worker
    restart: always
    depends_on:
      airflow-scheduler: { condition: service_started }
    environment:
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${AIRFLOW_USER_USERNAME}:${AIRFLOW_USER_PASSWORD}@postgres-airflow-db:5432/${AIRFLOW_DB}
      AIRFLOW__CELERY__BROKER_URL: redis://redis:6379/0
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://${AIRFLOW_USER_USERNAME}:${AIRFLOW_USER_PASSWORD}@postgres-airflow-db:5432/${AIRFLOW_DB}
      AIRFLOW__CORE__TEST_CONNECTION: Enabled
      AIRFLOW__WEBSERVER__SECRET_KEY: ${AIRFLOW_WEBSERVER_SECRET_KEY}
      AIRFLOW__CORE__FERNET_KEY: ${AIRFLOW_CORE_FERNET_KEY}
      # Spark CLI đã có trong image; SPARK_HOME/PATH set sẵn trong Dockerfile
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
      # Share JAR/data với Spark để spark-submit trong worker thấy được
      - ./spark-data/app:/opt/bitnami/spark/app
      - ./spark-data/jars:/opt/bitnami/spark/external-jars
      - ./spark-data/eventlogs:/opt/bitnami/spark/eventlogs
      - ./data:/data
    command: ["airflow", "celery", "worker"]
    networks: [data-net]

networks:
  data-net:
    driver: bridge

volumes:
  postgres-dwh-data:
  postgres-airflow-data: